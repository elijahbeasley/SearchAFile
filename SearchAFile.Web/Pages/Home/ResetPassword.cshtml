@page
@model SearchAFile.Web.Pages.Home.ResetPasswordModel
@{
}

<style>

    .cus-auth-code-container {
        display: grid;
        grid-template-columns: repeat(6, minmax(0, 1fr));
        grid-gap: 0.5rem;
        width: fit-content;
    }

    .cus-auth-code-char {
        border: 2px solid lightgray;
        border-radius: 0.3rem;
        font-size: 36px;
        text-align: center;
        aspect-ratio: 0.8;
    }

        .cus-auth-code-char:focus {
            border: 2px solid var(--bs-primary) !important;
            outline: none !important;
            /* outline: 1px solid var(--bs-primary) !important; */
    }
</style>

<div id="Step1">

    <form id="objFormFindAccount" method="post">

        <div id="divValidationSummaryFindAccount" asp-validation-summary="All" class="text-danger" hidden></div>

        <div class="card m-auto p-0" style="max-width: 30rem;">

            <div class="card-header cus-bg-primary cus-no-select" style="border-bottom: 3px solid var(--secondary-color);">
                <span class="fs-5 p-0" style="color: var(--secondary-text-color);">
                    Find Account
                </span>
            </div>

            <div class="card-body cus-bootstrap-table-striped p-0">

                <div class="row align-items-center m-0">
                    <div class="cus-col col fw-bold">
                        <div class="form-floating">
                            <input id="txtEmailAddress" asp-for="EmailAddress" type="email" class="form-control" placeholder="@Html.DisplayNameFor(model => model.EmailAddress)">
                            <label asp-for="EmailAddress" class="fw-bold">@Html.DisplayNameFor(model => model.EmailAddress)<span class="text-danger">*</span></label>
                        </div>
                    </div>
                </div>

                <div class="row align-items-center m-0 text-center">
                    <div class="cus-col col">
                        <div class="form-check form-check-inline">
                            <input id="radSMS" class="form-check-input" type="radio" name="DeliveryType" value="S" checked>
                            <label for="radSMS" class="form-check-label">SMS</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input id="radEmail" class="form-check-input" type="radio" name="DeliveryType" value="E">
                            <label for="radEmail" class="form-check-label">Email</label>
                        </div>
                    </div>
                </div>

            </div>

            <div class="card-footer text-center cus-no-select">
                <button id="btnLogIn" class="btn btn-outline-secondary" type="button" onclick="window.location = 'LogIn'" style="min-width: 40%;">
                    <i class="fa-solid fa-arrow-left"></i>
                    Log In
                </button>
                <button id="btnFindAccount" type="button" class="btn cus-btn-outline-primary" onclick="FindAccount();" style="min-width: 40%;">
                    <span class="cus-submit-label" style="color: unset;">
                        Find Account
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </span>
                    <img class="cus-submit-image" src="~/SystemFiles/loading.gif" style="display: none; height: 20px; width: 20px;" />
                </button>
            </div>

        </div>

    </form>
</div>
    
<div id="Step2" style="display: none;">
    <form id="objFormVerifyPin" method="post">
        
        <div id="divValidationSummaryVerifyPin" asp-validation-summary="All" class="text-danger" hidden></div>

        <div class="card m-auto p-0" style="max-width: 30rem;">

            <div class="card-header cus-bg-primary cus-no-select" style="border-bottom: 3px solid var(--secondary-color);">
                <span class="fs-5 p-0" style="color: var(--secondary-text-color);">
                    Reset Pin
                </span>
            </div>

            <div class="card-body align-self-center">
                <div class="cus-auth-code-container">
                    <input class="cus-auth-code-char" type="text" maxlength="1" />
                    <input class="cus-auth-code-char" type="text" maxlength="1" />
                    <input class="cus-auth-code-char" type="text" maxlength="1" />
                    <input class="cus-auth-code-char" type="text" maxlength="1" />
                    <input class="cus-auth-code-char" type="text" maxlength="1" />
                    <input class="cus-auth-code-char" type="text" maxlength="1" />
                </div>
                <input type="text" id="hdnResetPin" class="position-absolute" asp-for="ResetPin" style="margin: -100rem;" />
                <div id="divResendResetPin" class="mt-2 text-center collapse" style="cursor: pointer;">
                    <a id="btnResendResetPin" class="btn-link" onclick="ResendResetPin();" style="font-size: smaller;">
                        Didn't recieve your pin? Click here to resend your reset pin.
                    </a>
                </div>
            </div>

            <div class="card-footer text-center cus-no-select">
                <button id="btnStep1" type="button" class="btn btn-outline-secondary" onclick="PreviousStep(2);">
                    <i class="fa-solid fa-arrow-left"></i>
                    Back
                </button>
                <button id="btnVerifyPin" type="button" class="btn btn-outline-success" onclick="VerifyPin();">
                    <span class="cus-submit-label" style="color: unset;">
                        Verify
                        <i class="fa-solid fa-check-circle"></i>
                    </span>
                    <img class="cus-submit-image" src="~/SystemFiles/loading.gif" style="display: none; height: 20px; width: 20px;" />
                </button>
            </div>

        </div>

    </form>
</div>
    
<div id="Step3" style="display: none;">
    <form id="objFormResetPassword" method="post" onsubmit="$('#btnResetPassword').prop('disabled', $(this).valid()); $('#btnStep2').prop('disabled', $(this).valid());" autocomplete="new-password">

        <div id="divValidationSummaryResetPassword" asp-validation-summary="All" class="text-danger" hidden></div>

        <div class="card m-auto p-0" style="max-width: 30rem;">

            <div class="card-header cus-bg-primary cus-no-select" style="border-bottom: 3px solid var(--secondary-color);">
                <span class="fs-5 p-0" style="color: var(--secondary-text-color);">
                    Reset Password
                </span>
            </div>

            <div class="card-body cus-bootstrap-table-striped p-0">

                <div class="row align-items-center m-0">
                    <div class="cus-col col fw-bold">
                        <div class="form-floating">
                            <input id="txtNewPassword" asp-for="NewPassword" type="password" class="form-control" oninput="UpdateRequirements(this.value);" placeholder="@Html.DisplayNameFor(model => model.NewPassword)" autocomplete="new-password" />
                            <label asp-for="NewPassword">@Html.DisplayNameFor(model => model.NewPassword)<span class="text-danger">*</span></label>
                        </div>
                        <div class="text-secondary pt-2 cus-no-select" style="font-size: x-small; font-weight: normal;">
                            <i id="icoUpperCase" class="fa-regular fa-circle-xmark text-danger"></i> Contain at least one upper case letter
                            <br />
                            <i id="icoLowerCase" class="fa-regular fa-circle-xmark text-danger"></i> Contain at least one lower case letter
                            <br />
                            <i id="icoLength" class="fa-regular fa-circle-xmark text-danger"></i> Between 8 and 30 characters long
                            <br />
                            <i id="icoNumber" class="fa-regular fa-circle-xmark text-danger"></i> Contain at least one number
                        </div>
                    </div>
                </div>

                <div class="row align-items-center m-0">
                    <div class="cus-col col fw-bold">
                        <div class="form-floating">
                            <input id="txtRepeatPassword" asp-for="RepeatPassword" type="password" class="form-control" placeholder="@Html.DisplayNameFor(model => model.RepeatPassword)" autocomplete="new-password" />
                            <label asp-for="RepeatPassword">@Html.DisplayNameFor(model => model.RepeatPassword)<span class="text-danger">*</span></label>
                        </div>
                    </div>
                </div>

            </div>

            <div class="card-footer text-center cus-no-select">
                <button id="btnStep2" type="button" class="btn btn-outline-secondary" onclick="PreviousStep(3);">
                    <i class="fa-solid fa-arrow-left"></i>
                    Back
                </button>
                <button id="btnResetPassword" type="submit" class="btn btn-outline-success" onclick="return ResetPassword();" style="min-width: 40%;">
                    <span class="cus-submit-label" style="color: unset;">
                        Reset Password
                        <i class="fa-regular fa-circle-check"></i>
                    </span>
                    <img class="cus-submit-image" src="~/SystemFiles/loading.gif" style="display: none; height: 20px; width: 20px;" />
                </button>
            </div>

        </div>

    </form>
</div>

@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">

        setTimeout(function () { if ($('#txtEmailAddress').val() == '') { $('#txtEmailAddress').focus(); $('#txtEmailAddress').select(); } }, 300);

        $(document).on('keypress', function (event) {

            let keycode = (event.keyCode ? event.keyCode : event.which);

            if (keycode == '13') {

                if (!$(document.activeElement).is(':button')) {

                    event.preventDefault();

                    if ($('#Step1').is(':visible')) {

                        $('#btnFindAccount').click();
                    }
                    else if ($('#Step2').is(':visible')) {

                        $('#btnVerifyPin').click();
                    }
                    else if ($('#Step3').is(':visible')) {

                        $('#btnResetPassword').click();
                    }
                }
            }
        });

        function PreviousStep(CurrentStep) {

            $('#divResendResetPin').hide();

            if (CurrentStep == 2) {

                $('input.cus-auth-code-char').val('');
            }
            else if (CurrentStep == 3) {

                $('#divResendResetPin').show()
                $('#txtNewPassword').val('');
                $('#txtRepeatPassword').val('');
            }

            $('input').prop('disabled', false);
            $('input').removeClass('input-validation-error');

            $('#Step' + CurrentStep).hide();
            $('#Step' + (CurrentStep - 1)).fadeIn(500);
        }

        function NextStep(CurrentStep) {

            $('#Step' + CurrentStep).hide();
            $('#Step' + (CurrentStep + 1)).fadeIn(500);
        }

        function StartSubmission() {

            $('.cus-submit-label').hide();
            $('.cus-submit-image').show();
        }

        function EndSubmission() {

            $('.cus-submit-label').show();
            $('.cus-submit-image').hide();
        }

        function FindAccount() {

            window.top.ClearToast();

            // Validate the page.
            $('#objFormFindAccount').validate();

            if ($('#objFormFindAccount').valid()) {

                $('#txtEmailAddress').prop('disabled', true);
                $('#btnFindAccount').prop('disabled', true);
                $('btnLogIn').prop('disabled', true);

                StartSubmission();

                $('#txtEmailAddress').removeClass('input-validation-error');

                $.ajax({
                    type: 'GET',
                    url: PageURL + '?handler=FindAccount',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    data: {
                        emailaddress: encodeURIComponent($('#txtEmailAddress').val()),
                        deliveryType: encodeURIComponent($('[name="DeliveryType"]:checked').val())
                    },
                    success: function (response) {

                        const jsonResponse = $.parseJSON(response);

                        if (jsonResponse.booSuccess) {

                            if (jsonResponse.MessageDisplay == 'Toast'){

                                 window.top.ShowToast(jsonResponse.MessageType, 'Account Found!', jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                            else {

                                window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }

                            NextStep(1);
                            setTimeout(function () { $('#divResendResetPin').collapse('show') }, 30000);
                            $('.cus-auth-code-char').focus();
                        }
                        else {

                            $('#txtEmailAddress').prop('disabled', false);
                            $('#btnFindAccount').prop('disabled', false);

                            if (jsonResponse.MessageDisplay == 'Toast') {

                                 window.top.ShowToast(jsonResponse.MessageType, "Error!", jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                            else {

                                window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                        }

                        EndSubmission();
                        $('#btnFindAccount').prop('disabled', false);
                    }
                });
            }
            else {

                // Output the errors.
                 window.top.ShowToast("danger", "The following errors have occured", $('#divValidationSummaryFindAccount').html(), 0, false);
            }
        }

        function SendVerificationEmail() {

            $('#btnSendVerificationEmail').prop('disabled', true);

            $.ajax({
                type: 'GET',
                url: PageURL + '?handler=SendVerificationEmail',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                data: {
                    emailaddress: encodeURIComponent($('#txtEmailAddress').val())
                },
                success: function (response) {

                    const jsonResponse = $.parseJSON(response);

                    if (jsonResponse.booSuccess) {

                        window.top.ClearToast();
                        if (jsonResponse.MessageDisplay == 'Toast'){

                             window.top.ShowToast(jsonResponse.MessageType, "Success!", jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                        }
                        else {

                            window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                        }
                    }
                    else {

                        window.top.ClearToast();
                        if (jsonResponse.MessageDisplay == 'Toast'){

                             window.top.ShowToast(jsonResponse.MessageType, "Error!", jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                        }
                        else {

                            window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                        }
                    }
                }
            });
        }

        function ResendResetPin() {

            window.top.ClearToast();

            // Validate the page.
            $('#objFormFindAccount').validate();

            if ($('#objFormFindAccount').valid()) {

                $('#divResendResetPin').addClass('disabled');
                $('#btnResendResetPin').addClass('disabled');

                $.ajax({
                    type: 'GET',
                    url: PageURL + '?handler=FindAccount',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    data: {
                        emailaddress: encodeURIComponent($('#txtEmailAddress').val()),
                        deliveryType: encodeURIComponent($('[name="DeliveryType"]:checked').val())
                    },
                    success: function (response) {

                        const jsonResponse = $.parseJSON(response);

                        if (jsonResponse.booSuccess) {

                            if (jsonResponse.MessageDisplay == 'Toast'){

                                 window.top.ShowToast(jsonResponse.MessageType, 'Success!', jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                            else {

                                window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }

                            setTimeout(function () { $('#divResendResetPin').addClass('disabled'); $('#btnResendResetPin').removeClass('disabled'); }, 30000);
                            $('.cus-auth-code-char').focus();
                        }
                        else {

                            if (jsonResponse.MessageDisplay == 'Toast') {

                                 window.top.ShowToast(jsonResponse.MessageType, "Error!", jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                            else {

                                window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                        }
                    }
                });
            }
            else {

                // Output the errors.
                 window.top.ShowToast("danger", "The following errors have occured", $('#divValidationSummaryVerifyPin').html(), 0, false);
            }
        }

        function VerifyPin() {

            // Clear out the messages.
            window.top.ClearToast();

            // Validate the page.
            $('#objFormVerifyPin').validate();

            if ($('#objFormVerifyPin').valid()) {

                $('#btnVerifyPin').prop('disabled', true);
                $('btnStep1').prop('disabled', true);

                StartSubmission();

                $.ajax({
                    async: false,
                    type: 'GET',
                    url: PageURL + '?handler=VerifyPin',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    data: {
                        ResetPin: $('#hdnResetPin').val()
                    },
                    success: function (response) {

                        const jsonResponse = $.parseJSON(response);

                        if (jsonResponse.booSuccess) {

                            if (jsonResponse.MessageDisplay == 'Toast'){

                                 window.top.ShowToast(jsonResponse.MessageType, 'Success!', jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                            else {

                                window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }

                            $('.cus-auth-code-char').removeClass('input-validation-error');
                            NextStep(2);
                            $('#txtNewPassword').focus();
                        }
                        else {

                            if (jsonResponse.MessageDisplay == 'Toast') {

                                 window.top.ShowToast(jsonResponse.MessageType, "Error!", jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }
                            else {

                                window.top.ShowSnack(jsonResponse.MessageType, jsonResponse.ResponseMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            }

                            $('.cus-auth-code-char').val('');
                            $('#hdnResetPin').val('')
                            $('.cus-auth-code-char').addClass('input-validation-error');
                            $('.cus-auth-code-char').focus();
                        }

                        EndSubmission();
                        $('#btnVerifyPin').prop('disabled', false);
                    }
                });
            }
            else {

                $('.cus-auth-code-char').addClass('input-validation-error');
                $('.cus-auth-code-char').focus();

                // Output the errors.
                 window.top.ShowToast("danger", "The following errors have occured", $('#divValidationSummaryVerifyPin').html(), 0, false);
            }

            $('btnStep1').prop('disabled', false);
        }

        function ResetPassword() {

            // Clear out the messages.
            window.top.ClearToast();

            // Validate the page.
            $('#objFormResetPassword').validate();

            // Is the form valid?
            let booIsValid = $('#objFormResetPassword').valid();

            let strMessage = '';

            if ($('#txtNewPassword').val() != ''
                && $('#txtRepeatPassword').val() != '') {

                if ($('#txtRepeatPassword').val() != $('#txtNewPassword').val()) {

                    if (strMessage == '') {

                        $('#txtRepeatPassword').focus();
                    }

                    strMessage += '<li>The repeat password does not match the new password.</li>';
                    setTimeout(function () { $('#txtRepeatPassword').addClass('input-validation-error'); }, 100);
                }
                else {

                    $('#txtRepeatPassword').removeClass('input-validation-error');
                }
            }

            if (strMessage != '') {

                if (booIsValid) {

                    $('#divValidationSummaryResetPassword').html("<ul>" + strMessage + '</ul>');
                }
                else {

                    $("#divValidationSummaryResetPassword > ul").append(strMessage);
                }

                booIsValid = false;
            }

            if (!booIsValid) {

                $('#btnFindAccount').prop('disabled', false);
                $('#btnLogIn').prop('disabled', false);

                // Output the errors.
                 window.top.ShowToast("danger", "The following errors have occured", $('#divValidationSummaryResetPassword').html(), 0, false);
            }
            else {

                StartSubmission();
            }

            return booIsValid;
        }

        function UpdateRequirements(input) {

            // Length
            if (input.length >= 8
                && input.length <= 30) {

                $('#icoLength').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoLength').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoLength').removeClass('fa-solid text-success fa-circle-check');
                $('#icoLength').addClass('fa-regular text-danger fa-circle-xmark');
            }

            // Upper Case
            if (/[A-Z]{1,}/.test(input)) {

                $('#icoUpperCase').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoUpperCase').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoUpperCase').removeClass('fa-solid text-success fa-circle-check');
                $('#icoUpperCase').addClass('fa-regular text-danger fa-circle-xmark');
            }

            // Lower Case
            if (/[a-z]{1,}/.test(input)) {

                $('#icoLowerCase').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoLowerCase').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoLowerCase').removeClass('fa-solid text-success fa-circle-check');
                $('#icoLowerCase').addClass('fa-regular text-danger fa-circle-xmark');
            }

            // Letter Case
            if (/\d{1,}/.test(input)) {

                $('#icoNumber').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoNumber').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoNumber').removeClass('fa-solid text-success fa-circle-check');
                $('#icoNumber').addClass('fa-regular text-danger fa-circle-xmark');
            }
        }

        const classSelector = '.cus-auth-code-char';
        const inputs = $(classSelector);
        let deleted = false;

        $(classSelector).on('focus', function(e) {
          // Select the element.
          $(this).select();
          // Are there any empty elements before the one clicked on?
          if ($(this).prevAll(classSelector + ':empty').length > 0) {
            // Loop through the previous inputs from the one clicked on.
            $(this).prevAll(classSelector).each(function(e) {
              // Does the input NOT have anything entered in it?
              if ($(this).val() == '') {
                // Focus on the input.
                $(this).focus();
                // Exit the loop.
                return false;
              }
            });
          }
        });

        $(classSelector).on("keydown", function (e) {

          // Get the character code.
          let charCode = (e.which) ? e.which : e.keyCode;
          let isNumber = charCode >= 48 && charCode <= 57;
          let isNeededChar = charCode == 8 || charCode == 37 || charCode == 39;

          // On left arrow press, move to the left input.
          if (charCode == 37) { // Left arrow
            $(this).closest(classSelector).prevAll(classSelector).first().focus().select();
          }
          // On the right arrow press, move to the right input.
          //else if (charCode == 39 && ($(this).val() != '')) { // Right arrow
          else if (charCode == 39) { // Right arrow
            $(this).closest(classSelector).nextAll(classSelector).first().focus().select();
          }
          else if (!event.shiftKey && charCode == 9 && $(this).val() == '') {

            getNextFocus(this);
            e.preventDefault();
          }
          // Set the deleted bool to whether the deleted key was clicked or not.
          deleted = charCode == 46;
        });

        $(classSelector).on("keyup", function (e) {
          // Get the character code.
          let charCode = (e.which) ? e.which : e.keyCode;
          let isNumber = charCode >= 48 && charCode <= 57;
          let isNeededChar = charCode == 8 || charCode == 37 || charCode == 39;

          // Was the left or right arrow clicked?
          if (charCode == 37 || charCode == 39) {
            // Select the input.
            $(this).select();
          }
          // Was backspace clicked?
          else if (charCode == 8 && $(this).val() == '') { // Backspace
            // Move the cursor to the previous input.
            $(this).closest(classSelector).prevAll(classSelector).first().focus().select();
          }
        });

        $(classSelector).on("keypress", function (e) {
          // Get the character code.
          let charCode = (e.which) ? e.which : e.keyCode;
          let isNumber = charCode >= 48 && charCode <= 57;
          let isNeededChar = charCode == 8 || charCode == 37 || charCode == 39 || charCode == 127;

          // If the key pressed is not a number or one of the needed chars (left arrow, right arrow, backspace, and delete) then disable the key press.
          if (!isNumber && !isNeededChar)
          {
            e.preventDefault();
          }
        });

        $(classSelector).on('input', function (e) {

          // Was backspace pressed?
          if (!deleted && $(this).val() == '') { // Backspace
            // Move the cursor to the previous input.
            $(this).closest(classSelector).prevAll(classSelector).first().focus().select();
          }
          else if (!deleted) { // A number was typed in.
            // Move the cursor to the next input.
            $(this).closest(classSelector).nextAll(classSelector).first().focus().select();
          }
          // Set the auth code.
          SetAuthCode();
        });

        $(classSelector).on('paste', function (e) {
          // Disable the initial paste.
          e.preventDefault();
            // Set the clipboard text and clean it.
          let clipboardText = e.originalEvent.clipboardData.getData("text/plain").replaceAll(' ', '').replaceAll('-', '').substring(0, 6);

          // Is the text only numbers?
          if ($.isNumeric(clipboardText)) {
            let index = 0;
            // Loop through each input.
            $(inputs).each(function(e) {
              // Does the clipboard text (index) have a number for the input we are on?
              if (index < clipboardText.length) {
                // Set the input's value.
                $(this).val(clipboardText[index]);
              }
              else {
                // Clear our the value.
                $(this).val('');
              }
              // Increment the index.
              index = index + 1;
            });
            // Was the clipboard text a full 6 numbers?
            if (clipboardText.length == 6) {
              // Focus and select the final input.
              $($(inputs)[5]).focus().select();
            }
            else {
              // Focus and select the next empty input.
              $($(inputs)[clipboardText.length]).focus().select();
            }
            // Set the auth code.
            SetAuthCode();
          }
        });

        function getNextFocus(element) {
          // Get the next input (input, textarea, or button) element.
          let nextEl = $(element).find(':input,a').not(classSelector).not(':hidden').first();

          // Is there a next element?
          if (nextEl.length > 0) {
            // Focus to it.
            nextEl.focus().select();
          }
          // Does the element have a parent?
          else if ($(element).parent() != null && $(element).parent() != undefined) {
            // Recall the function with the parent element.
            getNextFocus($(element).parent());
          }
        }

        function SetAuthCode() {
          // Reset the auth code value.
          let authCode = '';
          // Loop through the inputs and build the auth code.
          $(inputs).each(function(e) {
            // Build the authCode string by taking each individual input's value.
            authCode += $(this).val();
          });
          // Set the hidden input value.
          $('#hdnResetPin').val(authCode);

          // Auto-click the verify pin button once the user has entered 6 numbers. 
          // if ($('#hdnResetPin').val().length == 6) {

          //     $('#btnVerifyPin').click();
          // }
        }

    </script>
}