@page
@model SearchAFile.Web.Pages.Common.ChangePasswordModel
@{
    Layout = "_LayoutModal";
}

<form id="objForm" method="post" onsubmit="$('#btnSave').prop('disabled', $(this).valid()); $('#btnCancel').prop('disabled', $(this).valid()); $('#btnCloseModal').prop('disabled', $(this).valid());" autocomplete="new-password">
    
    <div id="divValidationSummary" asp-validation-summary="All" hidden></div>

    <div class="card border-0 p-0">

        <div class="card-header d-flex align-items-center cus-no-select fs-6" style="background-color: var(--primary-color); border-bottom: 2px solid var(--secondary-color);">
            <label class="cus-card-header h-auto cus-text-secondary-text-no-hover">
                <i class="fa-solid fa-lock fs-5 me-1 cus-text-secondary-text-no-hover"></i>
                Change Password
            </label>
            <button type="button" class="btn p-0 m-0 ms-auto cus-text-secondary-text" onclick="window.top.CloseModal();" style="line-height: 1;">
                <i class="fa-solid fa-xmark fs-4"></i>
            </button>
        </div>

        <div class="modal-body card-body cus-bootstrap-table-striped p-0">

            <div class="row align-items-center m-0">
                <div class="cus-col fw-bold">
                    <div class="form-floating">
                        <input id="txtCurrentPassword" asp-for="User.Password" type="password" class="form-control" placeholder="@Html.DisplayNameFor(model => model.User.Password)" autocomplete="new-password">
                        <label asp-for="User.Password">@Html.DisplayNameFor(model => model.User.Password)<span class="text-danger">*</span></label>
                    </div>
                </div>
            </div>

            <div class="row align-items-center m-0">
                <div class="cus-col col fw-bold">
                    <div class="form-floating mb-0">
                        <input id="txtNewPassword" asp-for="NewPassword" type="password" class="form-control" oninput="UpdateRequirements(this.value);" placeholder="@Html.DisplayNameFor(model => model.NewPassword)" autocomplete="new-password" />
                        <label asp-for="NewPassword">@Html.DisplayNameFor(model => model.NewPassword)<span class="text-danger">*</span></label>
                    </div>
                    <div class="text-secondary pt-2 cus-no-select" style="font-size: x-small; font-weight: normal;">
                        <i id="icoUpperCase" class="fa-regular fa-circle-xmark text-danger"></i> Contain at least one upper case letter
                        <br />
                        <i id="icoLowerCase" class="fa-regular fa-circle-xmark text-danger"></i> Contain at least one lower case letter
                        <br />
                        <i id="icoLength" class="fa-regular fa-circle-xmark text-danger"></i> Between 8 and 30 characters long
                        <br />
                        <i id="icoNumber" class="fa-regular fa-circle-xmark text-danger"></i> Contain at least one number
                    </div>
                </div>
            </div>

            <div class="row align-items-center m-0">
                <div class="cus-col col fw-bold">
                    <div class="form-floating">
                        <input id="txtRepeatPassword" asp-for="RepeatPassword" type="password" class="form-control" placeholder="@Html.DisplayNameFor(model => model.RepeatPassword)" autocomplete="new-password" />
                        <label asp-for="RepeatPassword">@Html.DisplayNameFor(model => model.RepeatPassword)<span class="text-danger">*</span></label>
                    </div>
                </div>
            </div>

        </div>

        <div class="card-footer text-center cus-no-select">
            <button id="btnSave" class="btn btn-outline-success" type="submit" onclick="return Save();" style="min-width: 25%;">
                <span id="lblSubmit" style="color: unset;">
                    Save
                    <i class="fa-solid fa-save"></i>
                </span>
                <img id="imgSubmit" src="~/SystemFiles/loading.gif" style="display: none;" height="20px" width="25px" />
            </button>
            <button id="btnCancel" type="button" class="btn btn-outline-danger" onclick="window.top.CloseModal();" style="min-width: 20%;" title="Cancel">
                Cancel
                <i class="fa-solid fa-ban"></i>
            </button>
        </div>

    </div>

</form>

@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">

        if (self == top) {

            history.back();
        }

        $(window).resize(function () {

            if (self !== top) {

                window.top.ResizeModal();
            }
        });

        setTimeout(function () { $('#txtCurrentPassword').focus(); $('#txtCurrentPassword').select(); }, 300);

        $(document).on('keypress', function (event) {

            let keycode = (event.keyCode ? event.keyCode : event.which);

            if (keycode == '13') {

                event.preventDefault();
                $('#btnSave').click();
            }
        });

        function UpdateRequirements(input) {

            // Length
            if (input.length >= 8
                && input.length <= 30) {

                $('#icoLength').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoLength').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoLength').removeClass('fa-solid text-success fa-circle-check');
                $('#icoLength').addClass('fa-regular text-danger fa-circle-xmark');
            }

            // Upper Case
            if (/[A-Z]{1,}/.test(input)) {

                $('#icoUpperCase').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoUpperCase').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoUpperCase').removeClass('fa-solid text-success fa-circle-check');
                $('#icoUpperCase').addClass('fa-regular text-danger fa-circle-xmark');
            }

            // Lower Case
            if (/[a-z]{1,}/.test(input)) {

                $('#icoLowerCase').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoLowerCase').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoLowerCase').removeClass('fa-solid text-success fa-circle-check');
                $('#icoLowerCase').addClass('fa-regular text-danger fa-circle-xmark');
            }

            // Letter Case
            if (/\d{1,}/.test(input)) {

                $('#icoNumber').removeClass('fa-regular text-danger fa-circle-xmark');
                $('#icoNumber').addClass('fa-solid text-success fa-circle-check');
            }
            else {

                $('#icoNumber').removeClass('fa-solid text-success fa-circle-check');
                $('#icoNumber').addClass('fa-regular text-danger fa-circle-xmark');
            }
        }

        function Save() {

            // Clear out the messages.
            window.top.ClearToast();

            // Validate the page.
            $('#objForm').validate();

            // Is the form valid?
            let booIsValid = $('#objForm').valid();

            let strMessage = '';

            if ($('#txtCurrentPassword').val() != '') {

                $.ajax({
                    async: false,
                    type: 'GET',
                    url: PageURL + '?handler=IsCurrentPasswordEqual',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    data: {
                        CurrentPassword: $('#txtCurrentPassword').val()
                    },
                    success: function (response) {

                        const jsonResponse = $.parseJSON(response);

                        if (jsonResponse.booSuccess) {

                            if (jsonResponse.booIsEqual) {

                                $('#txtCurrentPassword').removeClass('input-validation-error');
                            }
                            else {

                                strMessage += '<li>The current password is incorrect.</li>';
                                setTimeout(function () { $('#txtCurrentPassword').addClass('input-validation-error'); }, 100);
                                $('#txtCurrentPassword').focus();
                            }
                        }
                        else {

                            window.top.ShowToast('danger', 'Error!', jsonResponse.ErrorMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                            StopLoadingAll();
                            return false;
                        }
                    }
                });
            }

            if ($('#txtNewPassword').val() != '') {

                if ($('#txtCurrentPassword').val() != '') {

                    $.get({
                        async: false,
                        type: 'GET',
                        url: PageURL + '?handler=IsNewPasswordEqual',
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        data: {
                            NewPassword: $('#txtNewPassword').val(),
                        },
                        success: function (response) {

                            const jsonResponse = $.parseJSON(response);

                            if (jsonResponse.booSuccess) {

                                if (jsonResponse.booIsEqual) {

                                    if (strMessage == '') {

                                        $('#txtNewPassword').focus();
                                    }

                                    strMessage += '<li>Your new password cannot be the same as your current password.</li>';
                                    setTimeout(function () { $('#txtNewPassword').addClass('input-validation-error'); }, 100);
                                }
                                else {

                                    $('#txtNewPassword').removeClass('input-validation-error');
                                }
                            }
                            else {

                                window.top.ShowToast('danger', 'Error!', jsonResponse.ErrorMessage.replace('\r', ' ').replace('\n', '<br />'), 0, false);
                                StopLoadingAll();
                                return false;
                            }
                        }
                    });
                }
            }

            if ($('#txtNewPassword').val() != ''
                && $('#txtRepeatPassword').val() != '') {

                if ($('#txtRepeatPassword').val() != $('#txtNewPassword').val()) {

                    if (strMessage == '') {

                        $('#txtRepeatPassword').focus();
                    }

                    strMessage += '<li>The repeat password does not match the new password.</li>';
                    setTimeout(function () { $('#txtRepeatPassword').addClass('input-validation-error'); }, 100);
                }
                else {

                    $('#txtRepeatPassword').removeClass('input-validation-error');
                }
            }

            if (strMessage != '') {

                if (booIsValid) {

                    $('#divValidationSummary').html("<ul>" + strMessage + '</ul>');
                }
                else {

                    $("#divValidationSummary > ul").append(strMessage);
                }

                booIsValid = false;
            }

            if (!booIsValid) {

                // Output the errors.
                window.top.ShowToast("danger", "The following errors have occured", $('#divValidationSummary').html(), 0, false);
            }
            else {

                window.top.StartLoadingModal('#divLoadingBlockModal');
            }

            return booIsValid;
        }

    </script>
}